---
- name: Testar a aplicação Minhas Economias com Autenticação
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    base_url: "http://localhost:8080"
    test_user_email: "lauro@localnet.com"
    test_user_pass: "1q2w3e"

    # Variáveis para o teste de CRUD (Task 5)
    test_descricao_crud: "Transação CRUD via Ansible"
    test_descricao_crud_atualizada: "Transação CRUD Ansible ATUALIZADA"

    # Variável específica para o teste de CSV (Task 7)
    test_descricao_csv: "Transação CSV via Ansible"

    ticker_nacional_teste: "WEGE3"
    ticker_internacional_teste: "MSFT"

  tasks:
    - name: 1. Verificar se a aplicação está no ar (página de login)
      ansible.builtin.uri:
        url: "{{ base_url }}/login"
      register: health_check
      until: health_check.status == 200
      retries: 5
      delay: 2
      ignore_errors: true

    - name: Falhar se a aplicação estiver offline
      ansible.builtin.fail:
        msg: "A aplicação não está respondendo em {{ base_url }}. Por favor, inicie a aplicação antes de rodar os testes."
      when: health_check.status != 200

    - name: 2. Autenticar na aplicação para obter o cookie de sessão
      ansible.builtin.uri:
        url: "{{ base_url }}/login"
        method: POST
        body_format: form-urlencoded
        body:
          email: "{{ test_user_email }}"
          password: "{{ test_user_pass }}"
        status_code: 302 # Login bem-sucedido redireciona para /
      register: login_result

    - name: Assert - Login bem-sucedido e cookie recebido
      ansible.builtin.assert:
        that:
          - "'session_token' in login_result.set_cookie"
          - login_result.location == "{{ base_url }}/"
        msg: "Falha no login ou cookie de sessão não encontrado. Verifique as credenciais."

    - name: Extrair o cookie de sessão para uso futuro
      ansible.builtin.set_fact:
        session_cookie: "{{ login_result.set_cookie }}"

    - name: 3. Testar o carregamento das páginas principais (autenticado)
      block:
        - name: Acessar a página de Saldos (/)
          ansible.builtin.uri:
            url: "{{ base_url }}/"
            return_content: true
            headers:
              Cookie: "{{ session_cookie }}"
          register: r_index
        - name: Assert - Página de Saldos está OK
          ansible.builtin.assert: { that: "r_index.status == 200 and 'Painel de Saldos' in r_index.content" }

        - name: Acessar a página de Configurações (/configuracoes)
          ansible.builtin.uri:
            url: "{{ base_url }}/configuracoes"
            return_content: true
            headers:
              Cookie: "{{ session_cookie }}"
          register: r_config
        - name: Assert - Página de Configurações está OK
          ansible.builtin.assert: { that: "r_config.status == 200 and 'Configurações da Conta' in r_config.content" }

    - name: 4. Testar a funcionalidade de Dark Mode
      block:
        - name: ATIVAR Dark Mode via API
          ansible.builtin.uri:
            url: "{{ base_url }}/api/user/settings"
            method: POST
            headers:
              Cookie: "{{ session_cookie }}"
            body_format: json
            body:
              dark_mode: true
          register: r_dark_on
        - name: Assert - Resposta da API de ativação está OK
          ansible.builtin.assert: { that: "r_dark_on.status == 200 and 'Configurações atualizadas' in r_dark_on.json.message" }

        - name: Verificar se o Dark Mode está ATIVO no HTML
          ansible.builtin.uri:
            url: "{{ base_url }}/" # Pode ser qualquer página que usa o layout
            headers:
              Cookie: "{{ session_cookie }}"
            return_content: true
          register: r_dark_check
        - name: Assert - Tag HTML contém a classe 'dark'
          ansible.builtin.assert: { that: "r_dark_check.status == 200 and '<html lang=\"pt-BR\" class=\"dark\">' in r_dark_check.content" }

      always:
        - name: DESATIVAR Dark Mode via API (limpeza)
          ansible.builtin.uri:
            url: "{{ base_url }}/api/user/settings"
            method: POST
            headers:
              Cookie: "{{ session_cookie }}"
            body_format: json
            body:
              dark_mode: false

    - name: 5. Testar o ciclo de vida de uma transação (CRUD autenticado)
      block:
        - name: 5.1 CRIAR - Adicionar uma nova movimentação para o teste de CRUD
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            headers:
              Accept: "application/json"
              Cookie: "{{ session_cookie }}"
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-09", descricao: "{{ test_descricao_crud }}", valor: "-123.45", categoria: "Teste CRUD", conta: "Conta Teste CRUD" }
            status_code: 201
          register: r_add
        - name: 5.2 Setar o ID da transação para o teste
          ansible.builtin.set_fact:
            crud_item_id: "{{ r_add.json.id }}"

        - name: 5.3 ATUALIZAR - Modificar a transação criada
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/update/{{ crud_item_id }}"
            method: POST
            headers: { Cookie: "{{ session_cookie }}" }
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-09", descricao: "{{ test_descricao_crud_atualizada }}", valor: "-543.21", categoria: "Teste CRUD Editado", conta: "Conta Teste CRUD" }
            status_code: 302

      always:
        - name: 5.4 LIMPEZA - Excluir a transação do teste de CRUD
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/{{ crud_item_id }}"
            method: DELETE
            headers:
              Cookie: "{{ session_cookie }}"
          when: crud_item_id is defined

    - name: 6. Testar geração de PDF (autenticado)
      ansible.builtin.uri:
        url: "{{ base_url }}/relatorio/pdf"
        method: POST
        headers:
          Cookie: "{{ session_cookie }}"
        body_format: json
        body:
          start_date: "2025-01-01"
          end_date: "2025-12-31"
          chartImageBase64: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII="
      register: r_pdf
    - name: Assert - Geração de PDF foi bem-sucedida
      ansible.builtin.assert:
        that:
          - r_pdf.status == 200
          - "'application/pdf' in r_pdf.content_type"

    - name: 7. Testar o Endpoint de Exportação CSV
      tags:
        - test_export
      block:
        # ETAPA 1: CRIAR DADOS PARA ESTE TESTE ESPECÍFICO
        - name: 7.1 CRIAR - Adicionar uma movimentação para o teste de CSV
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            headers:
              Accept: "application/json"
              Cookie: "{{ session_cookie }}"
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-01-15", descricao: "{{ test_descricao_csv }}", valor: "-99.99", categoria: "Categoria CSV", conta: "Conta CSV" }
            status_code: 201
          register: r_csv_add
        - name: 7.2 Setar o ID da transação para a limpeza posterior
          ansible.builtin.set_fact:
            csv_test_item_id: "{{ r_csv_add.json.id }}"

        # ETAPA 2: EXECUTAR OS TESTES DE EXPORTAÇÃO
        - name: 7.3 Verificar se o acesso não autenticado ao CSV é redirecionado
          ansible.builtin.uri:
            url: "{{ base_url }}/export/csv"
            method: GET
            follow_redirects: false
          register: unauth_response
          failed_when: unauth_response.status != 302 or '/login' not in unauth_response.location
          changed_when: false

        - name: 7.4 Verificar a exportação CSV (sem filtros)
          ansible.builtin.uri:
            url: "{{ base_url }}/export/csv"
            method: GET
            headers:
              Cookie: "{{ session_cookie }}"
            return_content: true
          register: csv_response

        - name: 7.5 Validar a resposta da exportação sem filtros
          ansible.builtin.assert:
            that:
              - csv_response.status == 200
              - "'text/csv' in csv_response.content_type"
              - "'attachment' in csv_response.content_disposition"
              - "test_descricao_csv in csv_response.content"
            fail_msg: "A exportação CSV sem filtros falhou na validação."
            success_msg: "A exportação CSV sem filtros foi validada com sucesso."

      # ETAPA 3: LIMPEZA (SEMPRE EXECUTA, MESMO SE O TESTE FALHAR)
      always:
        - name: 7.6 LIMPEZA - Excluir a transação do teste de CSV
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/{{ csv_test_item_id }}"
            method: DELETE
            headers:
              Cookie: "{{ session_cookie }}"
          when: csv_test_item_id is defined

    - name: 8. Testar o ciclo de vida de um investimento (CRUD autenticado)
      block:
        - name: 8.1 CRIAR - Adicionar um ativo nacional
          ansible.builtin.uri:
            url: "{{ base_url }}/investimentos/nacional"
            method: POST
            headers: { Cookie: "{{ session_cookie }}" }
            body_format: json
            body: { ticker: "{{ ticker_nacional_teste }}", tipo: "ACAO", quantidade: 100 }
            status_code: 200

        - name: 8.2 ATUALIZAR - Modificar o ativo nacional criado
          ansible.builtin.uri:
            url: "{{ base_url }}/investimentos/nacional/{{ ticker_nacional_teste }}"
            method: POST
            headers: { Cookie: "{{ session_cookie }}" }
            body_format: json
            body: { quantidade: 150 }
            status_code: 200

        - name: 8.3 CRIAR - Adicionar um ativo internacional
          ansible.builtin.uri:
            url: "{{ base_url }}/investimentos/internacional"
            method: POST
            headers: { Cookie: "{{ session_cookie }}" }
            body_format: json
            body: { ticker: "{{ ticker_internacional_teste }}", descricao: "Ações da Microsoft", quantidade: 25.5 }
            status_code: 200

      always:
        - name: 8.4 LIMPEZA - Excluir o ativo nacional de teste
          ansible.builtin.uri:
            url: "{{ base_url }}/investimentos/nacional/{{ ticker_nacional_teste }}"
            method: DELETE
            headers: { Cookie: "{{ session_cookie }}" }

        - name: 8.5 LIMPEZA - Excluir o ativo internacional de teste
          ansible.builtin.uri:
            url: "{{ base_url }}/investimentos/internacional/{{ ticker_internacional_teste }}"
            method: DELETE
            headers: { Cookie: "{{ session_cookie }}" }

    - name: 9. Testar o Endpoint de Preços Assíncronos
      ansible.builtin.uri:
        url: "{{ base_url }}/api/investimentos/precos"
        method: GET
        headers:
          Cookie: "{{ session_cookie }}"
      register: r_precos
    - name: Assert - API de Preços respondeu corretamente
      ansible.builtin.assert:
        that:
          - r_precos.status == 200
          - "'acoes' in r_precos.json"
          - "'fiis' in r_precos.json"
          - "'internacionais' in r_precos.json"
          - "'cotacaoDolar' in r_precos.json"
        msg: "A resposta da API de preços assíncronos está incompleta ou incorreta."
