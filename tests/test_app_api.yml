---
- name: Testar a aplicação Minhas Economias com Autenticação
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    base_url: "http://localhost:8080"
    test_user_email: "lauro@localnet.com"
    test_user_pass: "1q2w3e"
    test_descricao: "Transação de Teste via Ansible"
    test_descricao_atualizada: "Transação Ansible ATUALIZADA"

  tasks:
    - name: 1. Verificar se a aplicação está no ar (página de login)
      ansible.builtin.uri:
        url: "{{ base_url }}/login"
      register: health_check
      until: health_check.status == 200
      retries: 5
      delay: 2
      ignore_errors: true

    - name: Falhar se a aplicação estiver offline
      ansible.builtin.fail:
        msg: "A aplicação não está respondendo em {{ base_url }}. Por favor, inicie a aplicação antes de rodar os testes."
      when: health_check.status != 200

    - name: 2. Autenticar na aplicação para obter o cookie de sessão
      ansible.builtin.uri:
        url: "{{ base_url }}/login"
        method: POST
        body_format: form-urlencoded
        body:
          email: "{{ test_user_email }}"
          password: "{{ test_user_pass }}"
        status_code: 302 # Login bem-sucedido redireciona para /
      register: login_result

    - name: Assert - Login bem-sucedido e cookie recebido
      ansible.builtin.assert:
        that:
          - "'session_token' in login_result.set_cookie"
          - login_result.location == "{{ base_url }}/"
        msg: "Falha no login ou cookie de sessão não encontrado. Verifique as credenciais."

    - name: Extrair o cookie de sessão para uso futuro
      ansible.builtin.set_fact:
        session_cookie: "{{ login_result.set_cookie }}"

    - name: 3. Testar o carregamento das páginas principais (autenticado)
      block:
        - name: Acessar a página de Saldos (/)
          ansible.builtin.uri:
            url: "{{ base_url }}/"
            return_content: true
            headers:
              Cookie: "{{ session_cookie }}"
          register: r_index
        - name: Assert - Página de Saldos está OK
          ansible.builtin.assert: { that: "r_index.status == 200 and 'Painel de Saldos' in r_index.content" }

        - name: Acessar a página de Configurações (/configuracoes)
          ansible.builtin.uri:
            url: "{{ base_url }}/configuracoes"
            return_content: true
            headers:
              Cookie: "{{ session_cookie }}"
          register: r_config
        - name: Assert - Página de Configurações está OK
          ansible.builtin.assert: { that: "r_config.status == 200 and 'Configurações da Conta' in r_config.content" }

    - name: 4. Testar a funcionalidade de Dark Mode
      block:
        - name: ATIVAR Dark Mode via API
          ansible.builtin.uri:
            url: "{{ base_url }}/api/user/settings"
            method: POST
            headers:
              Cookie: "{{ session_cookie }}"
            body_format: json
            body:
              dark_mode: true
          register: r_dark_on
        - name: Assert - Resposta da API de ativação está OK
          ansible.builtin.assert: { that: "r_dark_on.status == 200 and 'Configurações atualizadas' in r_dark_on.json.message" }

        - name: Verificar se o Dark Mode está ATIVO no HTML
          ansible.builtin.uri:
            url: "{{ base_url }}/" # Pode ser qualquer página que usa o layout
            headers:
              Cookie: "{{ session_cookie }}"
            return_content: true
          register: r_dark_check
        - name: Assert - Tag HTML contém a classe 'dark'
          ansible.builtin.assert: { that: "r_dark_check.status == 200 and '<html lang=\"pt-BR\" class=\"dark\">' in r_dark_check.content" }

      always:
        - name: DESATIVAR Dark Mode via API (limpeza)
          ansible.builtin.uri:
            url: "{{ base_url }}/api/user/settings"
            method: POST
            headers:
              Cookie: "{{ session_cookie }}"
            body_format: json
            body:
              dark_mode: false

    # Os testes de CRUD e validação permanecem muito similares,
    # apenas adicionando o header de Cookie em cada requisição.
    - name: 5. Testar o ciclo de vida de uma transação (CRUD autenticado)
      block:
        - name: CRIAR - Adicionar uma nova movimentação
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            headers:
              Accept: "application/json"
              Cookie: "{{ session_cookie }}"
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-09", descricao: "{{ test_descricao }}", valor: "-123.45", categoria: "Teste Ansible", conta: "Conta Teste Ansible" }
            status_code: 201
          register: r_add
        - name: Assert - Criação retornou o objeto JSON com um ID
          ansible.builtin.assert: { that: "r_add.json.id is defined and r_add.json.id > 0" }
        - name: Setar o ID da nova transação (CRUD)
          ansible.builtin.set_fact:
            crud_item_id: "{{ r_add.json.id }}"

        - name: ATUALIZAR - Modificar a transação criada
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/update/{{ crud_item_id }}"
            method: POST
            headers:
              Cookie: "{{ session_cookie }}"
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-09", descricao: "{{ test_descricao_atualizada }}", valor: "-543.21", categoria: "Teste Ansible Editado", conta: "Conta Teste Ansible" }
            status_code: 302
          register: r_update
        - name: Assert - Atualização (CRUD) redireciona corretamente
          ansible.builtin.assert: { that: "r_update.location == '{{ base_url }}/transacoes'" }

        - name: DELETAR - Excluir a transação (CRUD)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/{{ crud_item_id }}"
            method: DELETE
            headers:
              Cookie: "{{ session_cookie }}"
            return_content: true
          register: r_delete
        - name: Assert - Deleção (CRUD) foi bem-sucedida
          ansible.builtin.assert: { that: "r_delete.status == 200 and 'Movimentação deletada com sucesso!' in r_delete.json.message" }

    - name: 6. Testar geração de PDF (autenticado)
      ansible.builtin.uri:
        url: "{{ base_url }}/relatorio/pdf"
        method: POST
        headers:
          Cookie: "{{ session_cookie }}"
        body_format: json
        body:
          start_date: "2025-01-01"
          end_date: "2025-12-31"
          chartImageBase64: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII="
      register: r_pdf
    - name: Assert - Geração de PDF foi bem-sucedida
      ansible.builtin.assert:
        that:
          - r_pdf.status == 200
          - "'application/pdf' in r_pdf.content_type"