---
- name: Testar a aplicação Minhas Economias
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    base_url: "http://localhost:8080"
    db_path: "{{ playbook_dir }}/../extratos.db"
    test_descricao: "Transação de Teste via Ansible"
    test_descricao_atualizada: "Transação Ansible ATUALIZADA"

  tasks:
    - name: 1. Verificar se a aplicação está no ar
      ansible.builtin.uri:
        url: "{{ base_url }}/"
      register: health_check
      ignore_errors: true

    - name: Falhar se a aplicação estiver offline
      ansible.builtin.fail:
        msg: "A aplicação não está respondendo em {{ base_url }}. Por favor, inicie a aplicação antes de rodar os testes."
      when: health_check.status != 200

    - name: 2. Testar o carregamento das páginas principais (GET)
      block:
        - name: Acessar a página de Saldos (/)
          ansible.builtin.uri: { url: "{{ base_url }}/", return_content: true }
          register: r_index
        - name: Assert - Página de Saldos está OK
          ansible.builtin.assert: { that: "r_index.status == 200 and 'Painel de Saldos' in r_index.content" }

        - name: Acessar a página de Transações (/transacoes)
          ansible.builtin.uri: { url: "{{ base_url }}/transacoes", return_content: true }
          register: r_transacoes
        - name: Assert - Página de Transações está OK
          ansible.builtin.assert: { that: "r_transacoes.status == 200 and 'Adicionar Nova Movimentação' in r_transacoes.content" }

        - name: Acessar a página de Relatório (/relatorio)
          ansible.builtin.uri: { url: "{{ base_url }}/relatorio", return_content: true }
          register: r_relatorio
        - name: Assert - Página de Relatório está OK
          ansible.builtin.assert: { that: "r_relatorio.status == 200 and 'Relatório de Despesas' in r_relatorio.content" }

        - name: Acessar a página Sobre (/sobre)
          ansible.builtin.uri: { url: "{{ base_url }}/sobre", return_content: true }
          register: r_sobre
        - name: Assert - Página Sobre está OK
          ansible.builtin.assert: { that: "r_sobre.status == 200 and 'Sobre o Projeto' in r_sobre.content" }

    - name: 3. Testar o ciclo de vida de uma transação (CRUD)
      block:
        - name: CRIAR - Adicionar uma nova movimentação (CRUD)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-20", descricao: "{{ test_descricao }}", valor: "-123.45", categoria: "Teste Ansible", conta: "Conta Teste Ansible" }
            status_code: 302
          register: r_add
        - name: Assert - Criação (CRUD) redireciona corretamente
          ansible.builtin.assert: { that: "r_add.location == '{{ base_url }}/transacoes'" }

        - name: LER - Buscar o ID da última transação inserida (CRUD)
          ansible.builtin.command: "sqlite3 {{ db_path }} 'SELECT id FROM movimentacoes ORDER BY id DESC LIMIT 1;'"
          register: r_get_id_crud
          changed_when: false
        - name: Setar o ID da nova transação (CRUD)
          ansible.builtin.set_fact:
            crud_item_id: "{{ r_get_id_crud.stdout }}"

        - name: ATUALIZAR - Modificar a transação criada (CRUD)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/update/{{ crud_item_id }}"
            method: POST
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-21", descricao: "{{ test_descricao_atualizada }}", valor: "-543.21", categoria: "Teste Ansible Editado", conta: "Conta Teste Ansible" }
            status_code: 302
          register: r_update
        - name: Assert - Atualização (CRUD) redireciona corretamente
          ansible.builtin.assert: { that: "r_update.location == '{{ base_url }}/transacoes'" }

        - name: DELETAR - Excluir a transação (CRUD)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes/{{ crud_item_id }}"
            method: DELETE
            return_content: true
          register: r_delete
        - name: Assert - Deleção (CRUD) foi bem-sucedida
          ansible.builtin.assert: { that: "r_delete.status == 200 and 'Movimentação deletada com sucesso!' in r_delete.json.message" }

    - name: 4. Testar validações de erro
      block:
        - name: Tentar adicionar transação sem a 'conta'
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-07-20", descricao: "Teste de falha", valor: "-10" }
            return_content: true
            status_code: 400
          register: r_fail_add
        - name: Assert - Recebe erro 400 (Bad Request)
          ansible.builtin.assert: { that: "r_fail_add.status == 400 and 'O campo \\'Conta\\' é obrigatório.' in r_fail_add.json.error" }

    - name: 5. Testar funcionalidades do Relatório (autossuficiente)
      block:
        - name: PREPARAR - Criar uma despesa de teste para o relatório
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body: { data_ocorrencia: "2025-02-15", descricao: "Despesa para Teste de Relatório", valor: "-99.99", categoria: "Categoria Relatorio", conta: "Conta Relatorio" }
            status_code: 302

        - name: LER - Buscar o ID da despesa de teste
          ansible.builtin.command: "sqlite3 {{ db_path }} 'SELECT id FROM movimentacoes ORDER BY id DESC LIMIT 1;'"
          register: r_get_id_relatorio
          changed_when: false
        - name: Setar o ID da transação de relatório
          ansible.builtin.set_fact:
            relatorio_item_id: "{{ r_get_id_relatorio.stdout }}"

        - name: TESTAR - API de transações por categoria
          ansible.builtin.uri:
            url: "{{ base_url }}/relatorio/transactions?category=Categoria+Relatorio&start_date=2025-02-01&end_date=2025-02-28"
            method: GET
            return_content: true
          register: r_report_api

        - name: Assert - API do relatório retorna o dado criado
          ansible.builtin.assert:
            that:
              - r_report_api.status == 200
              - r_report_api.json is defined and r_report_api.json is not none
              - (r_report_api.json | length) == 1
              - (r_report_api.json | first).categoria == "Categoria Relatorio"

      always:
        - name: LIMPEZA FINAL - Garantir que a despesa de teste do relatório seja deletada
          ansible.builtin.command:
            cmd: "sqlite3 {{ db_path }} \"DELETE FROM movimentacoes WHERE categoria = 'Categoria Relatorio';\""
          changed_when: false
          when: relatorio_item_id is defined

    - name: 6. Testar geração de PDF
      ansible.builtin.uri:
        url: "{{ base_url }}/relatorio/pdf"
        method: POST
        body_format: json
        body:
          start_date: "2025-01-01"
          end_date: "2025-03-31"
          chartImageBase64: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII="
      register: r_pdf

    - name: Assert - Geração de PDF foi bem-sucedida
      ansible.builtin.assert:
        that:
          - r_pdf.status == 200
          # CORREÇÃO FINAL: Acessando as chaves corretas (minúsculas e com underscore)
          - "'application/pdf' in r_pdf.content_type"
          - "'attachment; filename=\"relatorio_financeiro.pdf\"' in r_pdf.content_disposition"

    - name: 7. Testar Validações de Sanitização (Campos Valor e Descrição)
      block:
        - name: Tentar adicionar com DESCRIÇÃO muito longa (> 60 caracteres)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body:
              data_ocorrencia: "2025-07-20"
              descricao: "Esta é uma descrição muito, muito, muito, muito, muito longa que definitivamente excede o limite de 60 caracteres."
              valor: "100"
              conta: "Conta Teste"
            return_content: true
            status_code: 400
          register: r_fail_desc

        - name: Assert - Rejeita descrição longa com a mensagem correta
          ansible.builtin.assert:
            that:
              - r_fail_desc.status == 400
              - "'A descrição não pode ter mais de 60 caracteres.' in r_fail_desc.json.error"

        - name: Tentar adicionar com VALOR em formato inválido (texto)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body:
              data_ocorrencia: "2025-07-20"
              descricao: "Teste com valor de texto"
              valor: "abc"
              conta: "Conta Teste"
            return_content: true
            status_code: 400
          register: r_fail_valor_formato

        - name: Assert - Rejeita valor com formato de texto
          ansible.builtin.assert:
            that:
              - r_fail_valor_formato.status == 400
              - "'Valor inválido. Use um formato como 1234.56 ou -123.45.' in r_fail_valor_formato.json.error"

        - name: Tentar adicionar com VALOR com casas decimais a mais
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body:
              data_ocorrencia: "2025-07-20"
              descricao: "Teste com muitas decimais"
              valor: "123.456"
              conta: "Conta Teste"
            return_content: true
            status_code: 400
          register: r_fail_valor_decimais

        - name: Assert - Rejeita valor com muitas casas decimais
          ansible.builtin.assert:
            that:
              - r_fail_valor_decimais.status == 400
              - "'Valor inválido. Use um formato como 1234.56 ou -123.45.' in r_fail_valor_decimais.json.error"

        - name: Tentar adicionar com VALOR muito alto (acima do limite)
          ansible.builtin.uri:
            url: "{{ base_url }}/movimentacoes"
            method: POST
            body_format: form-urlencoded
            body:
              data_ocorrencia: "2025-07-20"
              descricao: "Teste com valor gigante"
              valor: "100000000" # 100 milhões
              conta: "Conta Teste"
            return_content: true
            status_code: 400
          register: r_fail_valor_limite

        - name: Assert - Rejeita valor acima do limite
          ansible.builtin.assert:
            that:
              - r_fail_valor_limite.status == 400
              - "'O valor excede o limite máximo permitido.' in r_fail_valor_limite.json.error"
...